/*
 *  ofxRGBDRenderer.h
 *
 *  Created by James George on 12/17/11.
 *  
 *  The ofxRGBDRenderer is capable of actually rendering a depth image aligned to a
 *  an RGB image from an external camera.
 *
 *  It requres a calibration file generated by a ofxRGBDAlignment from a series of checkerboard calibration pairs,
 *  a depth image and an rgb image from cameras from the same perspective
 *  
 *
 */

#pragma once
#include "ofMain.h"
#include "ofxCv.h"

using namespace ofxCv;
using namespace cv;

class ofxRGBDRenderer {
  public:
	ofxRGBDRenderer();
	~ofxRGBDRenderer();
	
	bool setup(string calibrationDirectory);

    void setRGBTexture(ofBaseHasPixels& pix); 
    void setDepthImage(ofShortPixels& pix);

    ofBaseHasPixels& getRGBTexture();

    void undistortImages();
	void update();

    //fudge factors to apply during alignment
    void setXYShift(ofVec2f shift);
    float xshift;
	float yshift;
    
    
    float rotx;
    float roty;
    float rotz;
    
    float transpx;
    float transpy;
    float transpz;

    
    float fx, fy;
    Point2d principalPoint;
    


	
	float edgeCull;
	float farClip;
    bool forceUndistortOff;
    bool addColors;
	bool mirror;
    bool calibrationSetup;
    
    ofVec3f meshRotate;

    bool bindRenderer(); //built in shader
    bool bindRenderer(ofShader& customShader); //any custom shader    
    void unbindRenderer();
    
    //called inside of bind/unbind
    void setupProjectionUniforms(ofShader& shader);
    void restortProjection();

    void drawProjectionDebug();
    
	void reloadShader();
    
	//sets a level of simplification, 
	//should be either 1 for none
	//2 for half, or 4 for quarter;
	void setSimplification(int level);
	int getSimplification();
	
	void drawMesh();
	void drawPointCloud();
	void drawWireFrame();

    void drawMesh(ofShader& customShader);
	void drawPointCloud(ofShader& customShader);
	void drawWireFrame(ofShader& customShader);

	//populated with vertices, texture coords, and indeces
	ofVboMesh& getMesh();
	
	Calibration& getRGBCalibration();
	Calibration& getDepthCalibration();
	    
  protected:
    
    ofMatrix4x4 fudgeMatrix;  
	
    int simplify;

    //bool shaderBound;
    ofShader* currentlyBoundShader;
    bool rendererBound;
    
    
    cv::Size imageSize;
	Calibration depthCalibration, rgbCalibration;    
	Mat rotationDepthToRGB, translationDepthToRGB;


	bool hasDepthImage;
	bool hasRGBImage;
    

    ofBaseHasPixels* currentRGBImage;
	ofShortPixels* currentDepthImage;
    ofImage undistortedRGBImage;
	ofShortPixels undistortedDepthImage;
	
    ofVboMesh mesh; 
    
	ofMatrix4x4 depthToRGBView;
	ofMatrix4x4 rgbProjection;
    ofMatrix4x4 rgbMatrix;
    
    


	ofShader meshShader;
    ofShader pointShader;  
    
};